## Multivariable Mendelian randomization: WBC as risk factors for overweight to obesity class 3 and BMI
## MR-BMA n-36

#set wd
setwd("C:/Users/James/demo_AMD")

#set up options for RMD (R markdown is text-based formatting that allows you to embed code and explanatory text in the same document)
# options(width = 120)
# knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_chunk$set(fig.path='repl_bma148/')

#load the relevant packages and functions
library(ggplot2)
library(TwoSampleMR)
library(tibble)
library(dplyr)
library(Hmisc)
source("summary_mvMR_SSS.R")
source("summary_mvMR_BF.R")

# List available GWASs
ao <- available_outcomes()

## 1. Loading the data (n=148 instrumental variables) and pre-processing
#load("amd_example")
exps = mv_extract_exposures(
  id_exposure = c("ebi-a-GCST004606", "ebi-a-GCST004610","ebi-a-GCST004618",
                  "ebi-a-GCST004629","ebi-a-GCST004625","ebi-a-GCST004627", "ebi-a-GCST004626", "ebi-a-GCST004614",
                  "ebi-a-GCST004600","ebi-a-GCST004631", "ebi-a-GCST004633", "ebi-a-GCST004609", "ebi-a-GCST004632", 
                  "ebi-a-GCST004608", "ebi-a-GCST004617", "ebi-a-GCST004634"),
  clump_r2 = 0.001,
  clump_kb = 10000,
  harmonise_strictness = 2,
  access_token = ieugwasr::check_access_token(),
  find_proxies = TRUE,
  force_server = FALSE,
  pval_threshold = 5e-09,
  pop = "EUR"
)
## Prepare outcome data using for-loop
outcome_id = c("ieu-b-40", "ieu-a-93", "ieu-a-90", "ieu-a-91", "ieu-a-92")

for (i in 1:length(outcome_id)){
  # print(outcome_id[i])
  outcome_dat = extract_outcome_data(
    snps = exps$SNP,
    outcomes = outcome_id[i],
    proxies = TRUE,
    rsq = 0.8,
    align_alleles = 1,
    palindromes = 1,
    maf_threshold = 0.3,
    access_token = ieugwasr::check_access_token(),
    splitsize = 10000,
    proxy_splitsize = 500
  )
  
  #check the outcome_dat
  #print(str(outcome_dat)) 
  #harmonize exposure and outcomes data
  mvdat = mv_harmonise_data(exposure_dat=exps, outcome_dat, harmonise_strictness = 2)
  
  #create
  betaX=as.data.frame(mvdat$exposure_beta)
  colnames(betaX)=capitalize(sapply(strsplit(mvdat$expname$exposure,fixed = TRUE, split= " ||"),"[",1))
  obesity_beta = mvdat$outcome_beta
  obesity_se = mvdat$outcome_se
  rs = row.names(betaX)
  genes = row.names(betaX)
  dim(betaX)
  colnames(betaX)
  rf = colnames(betaX)
  
  #perform (IVW) based on the SE of the amd beta effect estimates prior to subsequent analysis.
  betaX_ivw = betaX / obesity_se
  obesity_beta_ivw = obesity_beta / obesity_se
  dim(betaX_ivw)
  length(obesity_beta_ivw)
  
  #2 Analysis: Bayesian model selection with stochastic search
  #We create an object of class mvMRInput and we run MR-BMA allowing for models with up to n risk factors and a prior probability of 0.1 reflecting an a priori model size of three risk factors.
  set.seed(12345)
  obesity_wbc_input=new("mvMRInput", betaX = as.matrix(betaX_ivw), betaY = as.matrix(obesity_beta_ivw), snps=rs, exposure=rf, outcome = "obesity")
  BMA_output=summarymvMR_SSS(obesity_wbc_input,kmin=1,kmax=length(rf), prior_prob=0.1, max_iter=1000)
  
  #The best model with the highest posterior evidence:
  best_model_ind=as.numeric(unlist(strsplit(BMA_output@BestModel, ",")))
  rf[best_model_ind]
  BMA_output@BestModel_Estimate
  
  #What are the next best individual models?
  best.model.out = sss.report.best.model(BMA_output, prior_sigma=0.5, top = 10, write.out = TRUE, csv.file.name="obesity_best_10models_n371")
  best.model.out
  
  #MR-BMA output: MIP and MACE for each risk factor (top n)
  mr.bma.out = sss.report.mr.bma(BMA_output, top = length(rf), write.out = TRUE, csv.file.name="obesity_mr_bma_n371")
  mr.bma.out
  
  #3 Model diagnostics for outliers (Cook's D) and influential points (Q) for all models with pp>0.02
  diag_ppthresh = 0.02
  nr_diag = length(which(best.model.out[,2] >= diag_ppthresh))
  nr_diag
  model_index = names(which(best.model.out[,2] >= diag_ppthresh))
  model_index
  
  #The following loop computes:
  #the predicted genetic association (hat(beta_Y)) based on the model 
  #Cook's distance and its threshold for each genetic variant given the model 
  #the heterogeneity statistic q for each genetic variant given the model
  
  #initialise
  title = rep("1", nr_diag)
  predicted_obesity = matrix(ncol=nr_diag, nrow=length(obesity_beta_ivw))
  cD = matrix(ncol=nr_diag, nrow=length(obesity_beta_ivw))
  cD_thresh = vector(length=nr_diag)
  Q = matrix(ncol=nr_diag, nrow=length(obesity_beta_ivw))
  
  #fill with loop
  for(i in 1:nr_diag){
    print(as.numeric(unlist(strsplit(model_index[i], ","))))
    if(length(as.numeric(unlist(strsplit(model_index[i], ","))))>1){
      betaX_model = do.call(cbind, betaX_ivw[,as.numeric(unlist(strsplit(model_index[i], ",")))])
    }
    else{
      betaX_model = as.matrix(betaX_ivw[,as.numeric(unlist(strsplit(model_index[i], ",")))])
    }	
    title[i] = paste(rf[as.numeric(unlist(strsplit(model_index[i], ",")))],collapse=' + ')
    sigma_vec = rep(0.5, ncol(betaX_model))
    cD[,i] = cooksD(obesity_beta_ivw,betaX_model,sigma_vec)$cooksD
    cD_thresh[i] = cooksD(obesity_beta_ivw,betaX_model,sigma_vec)$cooksD_thresh
    H_fm = betaX_model %*% solve(t(betaX_model) %*% betaX_model + sigma_vec^{-2} ) %*% t(betaX_model)
    predicted_obesity[,i] = H_fm %*% obesity_beta_ivw
    Q[,i] = (obesity_beta_ivw-predicted_obesity[,i])^2
  }
  
  #3 Influential points via Cook's D
  #{r, echo=FALSE, include = TRUE, fig.height = 10, fig.width = 11}
  pdf(paste("Plots/Cook_s_d_",mvdat$outname$id.outcome,".pdf",sep = ""), pointsize =8,  width =7.2, height  = 7.2,family="Times", onefile=F)
  
  outcome_nam=tolower(sapply(strsplit(mvdat$outname$outcome,fixed = TRUE, split= " ||"),"[",1))
  
  for(i in 1:nr_diag){
    df = data.frame(x=predicted_obesity[,i], y =obesity_beta_ivw, cD = cD[,i], rs = rs)
    print(ggplot(df, aes(x, y)) +  geom_point(aes(colour = cD), size =4) + 
            scale_colour_gradientn(colours = c("white", "orange", "red", "darkred"), values=c(0,0.027,0.1,0.5,1))  +
            labs(x = paste("Predicted beta ",outcome_nam,sep = ""), y=paste("Observed beta ",outcome_nam,sep = ""), colour="Cook's D") + 
            geom_hline(yintercept = 0, linetype="dotted") + geom_vline(xintercept = 0, linetype="dotted") + 
            geom_text(aes(label=ifelse(cD>cD_thresh[i],as.character(rs),'')),hjust=0.5, vjust=-1, size=5) + 
            theme(axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13),
                  axis.title.x = element_text(size = 18), axis.title.y = element_text(size = 18),
                  legend.text=element_text(size=16),legend.title=element_text(size=18)) + ggtitle("Cook's distance"))
  }
  
  #In numbers, here is a table of Cook's distance of the top models, sorted by maximum Cooks Distance in any of the models considered.
  maxCD=apply(cD, MARGIN=1, FUN=max)
  sort.ix = sort.int(maxCD, decreasing=TRUE, index.return=TRUE)
  cooksD_tab=cbind(rs,round(cD,digits=3), round(maxCD,digits=3))
  #colnames(cooksD_tab)=c("rs","region","cooksD1","cooksD2","cooksD3","cooksD4","max cooksD")
  #tabular set of Cook's D top 1-n
  D_res_sig=cooksD_tab[sort.ix$ix,][1:10,]
  colnames(D_res_sig)[ncol(D_res_sig)]="max Cd"
  
  for (var_col in seq(from = 2,to = length(colnames(D_res_sig))-1)) {
    colnames(D_res_sig)[var_col]=paste("Cd M", var_col-1,sep = "")
  }
  
  dev.off()
  
  #Threshold of Cook's distance  according to F-statistic with d and n-d degrees of freedom.
  cD_thresh
  for(i in 1:nr_diag){
    print(rs[which(cD[,i] > cD_thresh[i])])
  }
  
  ## Outliers with Q
  pdf(paste("Plots/Q_",mvdat$outname$id.outcome,".pdf",sep = ""), pointsize =8,  width =7.2, height  = 7.2,family="Times", onefile=F)
  
  #{r, echo=FALSE, include = TRUE, fig.height = 10, fig.width = 11}
  for(i in 1:nr_diag){
    df = data.frame(x=predicted_obesity[,i], y =obesity_beta_ivw, Q = Q[,i], rs = rs)
    print(ggplot(df, aes(x, y)) +  geom_point(aes(colour = Q), size =4) + 
            scale_colour_gradientn(colours = c("white", "yellow", "green", "darkgreen"), values=c(0,0.027,0.1,0.5,1))  + 
            labs(x = paste("Predicted beta ",outcome_nam,sep = ""), y=paste("Observed beta ",outcome_nam,sep = ""), colour="Q") + 
            geom_hline(yintercept = 0, linetype="dotted") + geom_vline(xintercept = 0, linetype="dotted") +  
            geom_text(aes(label=ifelse(Q>10,as.character(rs),'')),hjust=0.5, vjust=-1, size=5) + 
            theme(axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13), 
                  axis.title.x = element_text(size = 18), axis.title.y = element_text(size = 18), 
                  legend.text=element_text(size=16),legend.title=element_text(size=18)) + ggtitle("Q-statistic"))
  }
  
  dev.off()
  
  #Tabular value of top 30 Q-statistics
  maxQ=apply(Q, MARGIN=1, FUN=max)
  sort.ix = sort.int(maxQ, decreasing=TRUE, index.return=TRUE)
  Q_tab=cbind(rs,round(Q,digits=3), round(maxQ,digits=3))
  Q_res_sig=data.frame(Q_tab[sort.ix$ix,][1:10,])
  colnames(Q_res_sig)[ncol(Q_res_sig)]="max Q"
  
  for (var_col in seq(from = 2,to = length(colnames(Q_res_sig))-1)) {
    colnames(Q_res_sig)[var_col]=paste("Q M", var_col-1,sep = "")
  }
  
  #change to data.frame then eliminate rs that supercede threshold of Q=10
  Q_tabresults = data.frame(Q_tab)
  colnames(Q_tabresults)[ncol(Q_tabresults)]="max_Q"
  
  Q_tabresults$max_Q = as.numeric(Q_tabresults$max_Q)
  Q_sig_SNP_list=Q_tabresults[Q_tabresults$max_Q>10,]$rs
  
  #remove outliers
  D_sig_SNP_list=genes[which(cD[,i] > cD_thresh[i])]
  
  #4 Removing outliers identified by Q-statistic and Influential variants identified by Cook's D
  
  Q_outlier=which(Q_tabresults$max_Q>10)
  D_outlier=which(rs %in% D_sig_SNP_list)
  
  exclude_vec = c(Q_outlier,D_outlier)
  
  if (length(exclude_vec) > 0) {
    betaX=betaX[-exclude_vec,] 
    obesity_beta = obesity_beta[-exclude_vec]
    obesity_se = obesity_se[-exclude_vec]
    rs = rs[-exclude_vec]
    genes = genes[-exclude_vec]
    rf = colnames(betaX)
    
    #perform (IVW) based on the SE of the amd beta effect estimates prior to subsequent analysis.
    betaX_ivw = betaX / obesity_se
    obesity_beta_ivw = obesity_beta / obesity_se
    dim(betaX_ivw)
    length(obesity_beta_ivw)
    
    #5 Analysis: Bayesian model selection with stochastic search
    #We create an object of class mvMRInput and we run MR-BMA allowing for models with up to n risk factors and a prior probability of 0.1 reflecting an a priori model size of three risk factors.
    set.seed(12345)
    obesity_wbc_input=new("mvMRInput", betaX = as.matrix(betaX_ivw), betaY = as.matrix(obesity_beta_ivw), snps=rs, exposure=rf, outcome = "obesity")
    BMA_output=summarymvMR_SSS(obesity_wbc_input,kmin=1,kmax=length(rf), prior_prob=0.1, max_iter=1000)
    
    #The best model with the highest posterior evidence:
    best_model_ind=as.numeric(unlist(strsplit(BMA_output@BestModel, ",")))
    rf[best_model_ind]
    BMA_output@BestModel_Estimate
    
    #What are the next best individual models?
    best.model.out = sss.report.best.model(BMA_output, prior_sigma=0.5, top = 10, write.out = TRUE, csv.file.name="obesity_best_10models_n371")
    best.model.out
    
    #MR-BMA output: MIP and MACE for each risk factor (top n)
    mr.bma.out = sss.report.mr.bma(BMA_output, top = length(rf), write.out = TRUE, csv.file.name="obesity_mr_bma_n371")
    mr.bma.out
    
    #MR-BMA permutation: Compute empirical p-values based on permutations. For illustration reasons we only perform 100 permutations here. Ideally, the permutation should be repeated 100k times, Please note this may require a long runtime.
    permute_bma = create.permutations(BMA_output, nrepeat = 1000, save.matrix=TRUE, file.name = "permutation_mrBMA.csv")
    empirical.p = calculate.p(BMA_output, permute_bma)
    empirical.p
    
    write.table(x=mr.bma.out, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = FALSE, col.names = TRUE, append = TRUE)
    write.table(x=best.model.out, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = FALSE, col.names = TRUE, append = TRUE)
    write.table(x=Q_res_sig, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = FALSE, col.names = TRUE, append = TRUE)
    write.table(x=D_res_sig, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = FALSE, col.names = TRUE, append = TRUE)
    write.table(x=empirical.p, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = TRUE, col.names = TRUE, append = TRUE)
  } else {
    #MR-BMA permutation: Compute empirical p-values based on permutations. For illustration reasons we only perform 1000 permutations here. Ideally, the permutation should be repeated 100k times, Please note this may require a long runtime.
    permute_bma = create.permutations(BMA_output, nrepeat = 1000, save.matrix=TRUE, file.name = "permutation_mrBMA.csv")
    empirical.p = calculate.p(BMA_output, permute_bma)
    empirical.p
    
    write.table(x=mr.bma.out, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = FALSE, col.names = TRUE, append = TRUE)
    write.table(x=best.model.out, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = FALSE, col.names = TRUE, append = TRUE)
    write.table(x=Q_res_sig, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = FALSE, col.names = TRUE, append = TRUE)
    write.table(x=D_res_sig, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = FALSE, col.names = TRUE, append = TRUE)
    write.table(x=empirical.p, file = paste("Results/",mvdat$outname$id.outcome,".txt",sep = ""), sep = "\t", quote = FALSE,row.names = TRUE, col.names = TRUE, append = TRUE)
  }
}
